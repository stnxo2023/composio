// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-axios";
import type {
  ActionsControllerV2ListUserFilesError,
  ActionsControllerV2ListUserFilesResponse,
  AddProjectData,
  AddProjectError,
  AddProjectResponse,
  AdvancedUseCaseSearchData,
  AdvancedUseCaseSearchError,
  AdvancedUseCaseSearchResponse2,
  CreateConnectorData,
  CreateConnectorError,
  CreateConnectorResponse,
  CreateConnectorV2Data,
  CreateConnectorV2Error,
  CreateConnectorV2Response,
  CreateFileUploadUrlData,
  CreateFileUploadUrlError,
  CreateFileUploadUrlResponse,
  CreateProjectData,
  CreateProjectError,
  CreateProjectResponse,
  DeleteApiKeyData,
  DeleteApiKeyError,
  DeleteApiKeyResponse,
  DeleteConnectionData,
  DeleteConnectionError,
  DeleteConnectionResponse,
  DeleteConnectorData,
  DeleteConnectorError,
  DeleteConnectorResponse,
  DeleteProjectData,
  DeleteProjectError,
  DeleteProjectResponse,
  DeleteTriggerData,
  DeleteTriggerError,
  DeleteTriggerResponse,
  DisableConnectionData,
  DisableConnectionError,
  DisableConnectionResponse,
  DisableTriggerData,
  DisableTriggerError,
  DisableTriggerResponse,
  EnableConnectionData,
  EnableConnectionError,
  EnableConnectionResponse,
  EnableTriggerData,
  EnableTriggerError,
  EnableTriggerResponse,
  ExecuteActionV2Data,
  ExecuteActionV2Error,
  ExecuteActionV2Response,
  ExecuteWithHttpClientData,
  ExecuteWithHttpClientError,
  ExecuteWithHttpClientResponse,
  GenerateApiKeyData,
  GenerateApiKeyError,
  GenerateApiKeyResponse,
  GenerateCliSessionError,
  GenerateCliSessionResponse,
  GetActionInputsV2Data,
  GetActionInputsV2Error,
  GetActionInputsV2Response,
  GetActionV2Data,
  GetActionV2Error,
  GetActionV2Response,
  GetActiveTriggersData,
  GetActiveTriggersError,
  GetActiveTriggersResponse,
  GetAppData,
  GetAppError,
  GetAppResponse,
  GetAppsData,
  GetAppsError,
  GetAppsResponse,
  GetCliCodeData,
  GetCliCodeError,
  GetCliCodeResponse,
  GetConnectionData,
  GetConnectionError,
  GetConnectionInfoData,
  GetConnectionInfoError,
  GetConnectionInfoResponse,
  GetConnectionResponse,
  GetConnectorInfoData,
  GetConnectorInfoError,
  GetConnectorInfoResponse,
  GetLogsData,
  GetLogsError,
  GetLogsResponse,
  GetOrCreateConnectorData,
  GetOrCreateConnectorError,
  GetOrCreateConnectorResponse,
  GetOrgApiKeyError,
  GetOrgApiKeyResponse,
  GetProjectData,
  GetProjectError,
  GetProjectResponse,
  GetProjectsError,
  GetProjectsResponse,
  GetTriggerInfoV2Data,
  GetTriggerInfoV2Error,
  GetTriggerInfoV2Response,
  GetTriggerLogsData,
  GetTriggerLogsError,
  GetTriggerLogsResponse,
  GetUserInfoError,
  GetUserInfoResponse,
  GetWebhookUrlError,
  GetWebhookUrlResponse,
  InitiateConnectionData,
  InitiateConnectionError,
  InitiateConnectionResponse2,
  InitiateConnectionV2Data,
  InitiateConnectionV2Error,
  InitiateConnectionV2Response,
  InviteMemberData,
  InviteMemberError,
  InviteMemberResponse,
  ListActionEnums1Error,
  ListActionEnums1Response,
  ListActionEnumsError,
  ListActionEnumsResponse,
  ListActionTagsData,
  ListActionTagsError,
  ListActionTagsResponse,
  ListActionsMinimalV2Data,
  ListActionsMinimalV2Error,
  ListActionsMinimalV2Response,
  ListActionsV2Data,
  ListActionsV2Error,
  ListActionsV2Response,
  ListAllConnectorsError,
  ListAllConnectorsResponse,
  ListApiKeysError,
  ListApiKeysResponse,
  ListAppCategoriesError,
  ListAppCategoriesResponse,
  ListAppEnumsError,
  ListAppEnumsResponse,
  ListConnectionsData,
  ListConnectionsError,
  ListConnectionsResponse,
  ListMembersError,
  ListMembersResponse,
  ListTriggerEnumsError,
  ListTriggerEnumsResponse,
  ListTriggersData,
  ListTriggersError,
  ListTriggersResponse,
  ModifyConnectorData,
  ModifyConnectorError,
  ModifyConnectorResponse,
  PostLogsData,
  PostLogsError,
  PostLogsResponse,
  RegenerateOrgApiKeyError,
  RegenerateOrgApiKeyResponse,
  RegenerateProjectApiKeyData,
  RegenerateProjectApiKeyError,
  RegenerateProjectApiKeyResponse,
  ReinitiateConnectionData,
  ReinitiateConnectionError,
  ReinitiateConnectionResponse,
  RenameProjectData,
  RenameProjectError,
  RenameProjectResponse,
  SearchConnectorData,
  SearchConnectorError,
  SearchConnectorResponse,
  SetCallbackUrlData,
  SetCallbackUrlError,
  SetCallbackUrlResponse,
  SwitchTriggerInstanceStatusData,
  SwitchTriggerInstanceStatusError,
  SwitchTriggerInstanceStatusResponse,
  UpdateConnectionDataData,
  UpdateConnectionDataError,
  UpdateConnectionDataResponse,
  UpdateNewWebhookData,
  UpdateNewWebhookError,
  UpdateNewWebhookResponse,
  VerifyCliCodeData,
  VerifyCliCodeError,
  VerifyCliCodeResponse,
} from "./types.gen";

export const client = createClient(createConfig());

export class ClientService {
  /**
   * Get user info
   * Get client info
   */
  public static getUserInfo<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetUserInfoResponse,
      GetUserInfoError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/client/auth/client_info",
    });
  }

  /**
   * Add new project
   * Add a new project to the client's organization
   */
  public static addProject<ThrowOnError extends boolean = false>(
    options?: Options<AddProjectData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      AddProjectResponse,
      AddProjectError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/client/auth/project/add",
    });
  }

  /**
   * Delete project
   * Delete a project from the client's organization
   */
  public static deleteProject<ThrowOnError extends boolean = false>(
    options: Options<DeleteProjectData, ThrowOnError>
  ) {
    return (options?.client ?? client).delete<
      DeleteProjectResponse,
      DeleteProjectError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/client/auth/project/delete/{projectId}",
    });
  }

  /**
   * Get projects
   */
  public static getProjects<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetProjectsResponse,
      GetProjectsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/client/auth/projects",
    });
  }

  /**
   * Get org api key
   */
  public static getOrgApiKey<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetOrgApiKeyResponse,
      GetOrgApiKeyError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/client/auth/org/api_key",
    });
  }

  /**
   * Regenerate org api key
   */
  public static regenerateOrgApiKey<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      RegenerateOrgApiKeyResponse,
      RegenerateOrgApiKeyError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/client/auth/org/api_key/regenerate",
    });
  }
}

export class TeamService {
  /**
   * Invite member
   */
  public static inviteMember<ThrowOnError extends boolean = false>(
    options?: Options<InviteMemberData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      InviteMemberResponse,
      InviteMemberError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/team/invite",
    });
  }

  /**
   * List members
   */
  public static listMembers<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListMembersResponse,
      ListMembersError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/team/members",
    });
  }
}

export class ApiKeysService {
  /**
   * Generate api key
   */
  public static generateApiKey<ThrowOnError extends boolean = false>(
    options: Options<GenerateApiKeyData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      GenerateApiKeyResponse,
      GenerateApiKeyError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/api_keys",
    });
  }

  /**
   * List api keys
   */
  public static listApiKeys<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListApiKeysResponse,
      ListApiKeysError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/api_keys",
    });
  }

  /**
   * Delete api key
   */
  public static deleteApiKey<ThrowOnError extends boolean = false>(
    options: Options<DeleteApiKeyData, ThrowOnError>
  ) {
    return (options?.client ?? client).delete<
      DeleteApiKeyResponse,
      DeleteApiKeyError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/api_keys/{id}",
    });
  }
}

export class AppsService {
  /**
   * List app categories
   * List of available app categories, can be used to filter apps.
   */
  public static listAppCategories<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListAppCategoriesResponse,
      ListAppCategoriesError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/apps/list/categories",
    });
  }

  /**
   * List app enums
   * List app enums
   */
  public static listAppEnums<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListAppEnumsResponse,
      ListAppEnumsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/apps/list/enums",
    });
  }

  /**
   * List apps
   * List all apps based on the given filters, if any. This will return all available apps if no filters are provided.
   */
  public static getApps<ThrowOnError extends boolean = false>(
    options?: Options<GetAppsData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetAppsResponse,
      GetAppsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/apps",
    });
  }

  /**
   * Get single app
   * Get app details
   */
  public static getApp<ThrowOnError extends boolean = false>(
    options: Options<GetAppData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetAppResponse,
      GetAppError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/apps/{appName}",
    });
  }
}

export class IntegrationsService {
  /**
   * Create connector
   * Create a new connector
   */
  public static createConnector<ThrowOnError extends boolean = false>(
    options?: Options<CreateConnectorData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      CreateConnectorResponse,
      CreateConnectorError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/integrations",
    });
  }

  /**
   * List all connectors
   * List all connectors
   */
  public static listAllConnectors<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListAllConnectorsResponse,
      ListAllConnectorsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/integrations",
    });
  }

  /**
   * Get connector info
   * Get connector info
   */
  public static getConnectorInfo<ThrowOnError extends boolean = false>(
    options: Options<GetConnectorInfoData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetConnectorInfoResponse,
      GetConnectorInfoError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/integrations/{integrationId}",
    });
  }

  /**
   * Modify connector
   * Modify a connector
   */
  public static modifyConnector<ThrowOnError extends boolean = false>(
    options: Options<ModifyConnectorData, ThrowOnError>
  ) {
    return (options?.client ?? client).patch<
      ModifyConnectorResponse,
      ModifyConnectorError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/integrations/{integrationId}",
    });
  }

  /**
   * Delete connector
   * Delete a connector
   */
  public static deleteConnector<ThrowOnError extends boolean = false>(
    options: Options<DeleteConnectorData, ThrowOnError>
  ) {
    return (options?.client ?? client).delete<
      DeleteConnectorResponse,
      DeleteConnectorError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/integrations/{integrationId}",
    });
  }
}

export class ActionsService {
  /**
   * List action enums
   * List action enums
   */
  public static listActionEnums<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListActionEnumsResponse,
      ListActionEnumsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/actions/list/enums",
    });
  }

  /**
   * List action tags
   * List all the action tags available in composio
   */
  public static listActionTags<ThrowOnError extends boolean = false>(
    options?: Options<ListActionTagsData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListActionTagsResponse,
      ListActionTagsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/list/tags",
    });
  }

  /**
   * List action enums
   * List action enums
   */
  public static listActionEnums1<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListActionEnums1Response,
      ListActionEnums1Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/list/enums",
    });
  }

  /**
   * List actions with complete details
   * List and filter all the actions available in composio, with all the details needed for manual action execution or through function-calling.
   */
  public static listActionsV2<ThrowOnError extends boolean = false>(
    options?: Options<ListActionsV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListActionsV2Response,
      ListActionsV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions",
    });
  }

  /**
   * List actions
   * Retrieve a list of all actions based on query parameters.
   */
  public static listActionsMinimalV2<ThrowOnError extends boolean = false>(
    options?: Options<ListActionsMinimalV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListActionsMinimalV2Response,
      ListActionsMinimalV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/list/all",
    });
  }

  /**
   * Execute an action
   * Execute an action. Support both connected account and no auth auth.
   */
  public static executeActionV2<ThrowOnError extends boolean = false>(
    options: Options<ExecuteActionV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      ExecuteActionV2Response,
      ExecuteActionV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/{actionId}/execute",
    });
  }

  /**
   * Get action inputs
   * Get the inputs for an action with NLA
   */
  public static getActionInputsV2<ThrowOnError extends boolean = false>(
    options: Options<GetActionInputsV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      GetActionInputsV2Response,
      GetActionInputsV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/{actionId}/execute/get.inputs",
    });
  }

  /**
   * Get single action
   * Get action details, including the input and response schema. This is very useful for setting upfunction/tool calling with composio actions.
   */
  public static getActionV2<ThrowOnError extends boolean = false>(
    options: Options<GetActionV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetActionV2Response,
      GetActionV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/{actionId}",
    });
  }

  /**
   * Execute with HTTP Client
   * Use composio as a http client to make request to the connected account service on your behalf, without managing authentication on your side.
   */
  public static executeWithHttpClient<ThrowOnError extends boolean = false>(
    options?: Options<ExecuteWithHttpClientData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      ExecuteWithHttpClientResponse,
      ExecuteWithHttpClientError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/proxy",
    });
  }

  /**
   * Advanced use case search
   * Perform use case search.
   */
  public static advancedUseCaseSearch<ThrowOnError extends boolean = false>(
    options?: Options<AdvancedUseCaseSearchData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      AdvancedUseCaseSearchResponse2,
      AdvancedUseCaseSearchError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/search/advanced",
    });
  }

  /**
   * List user files
   */
  public static v2ListUserFiles<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ActionsControllerV2ListUserFilesResponse,
      ActionsControllerV2ListUserFilesError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/files/list",
    });
  }

  /**
   * Create file upload url
   * Create file upload URL for action execution.
   */
  public static createFileUploadUrl<ThrowOnError extends boolean = false>(
    options: Options<CreateFileUploadUrlData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      CreateFileUploadUrlResponse,
      CreateFileUploadUrlError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/actions/files/upload/{fileType}",
    });
  }
}

export class ConnectionsService {
  /**
   * List connections
   * Get all connections in the current project.
   */
  public static listConnections<ThrowOnError extends boolean = false>(
    options?: Options<ListConnectionsData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListConnectionsResponse,
      ListConnectionsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts",
    });
  }

  /**
   * Initiate connection
   */
  public static initiateConnection<ThrowOnError extends boolean = false>(
    options?: Options<InitiateConnectionData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      InitiateConnectionResponse2,
      InitiateConnectionError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts",
    });
  }

  /**
   * Update connection data
   * Update connection data
   */
  public static updateConnectionData<ThrowOnError extends boolean = false>(
    options: Options<UpdateConnectionDataData, ThrowOnError>
  ) {
    return (options?.client ?? client).patch<
      UpdateConnectionDataResponse,
      UpdateConnectionDataError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts/{connectedAccountId}/data",
    });
  }

  /**
   * Reinitiate connection
   * Reinitiate an existing connection to get new credentials
   */
  public static reinitiateConnection<ThrowOnError extends boolean = false>(
    options: Options<ReinitiateConnectionData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      ReinitiateConnectionResponse,
      ReinitiateConnectionError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts/{connectedAccountId}/reinitiate",
    });
  }

  /**
   * Get single connection
   */
  public static getConnection<ThrowOnError extends boolean = false>(
    options: Options<GetConnectionData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetConnectionResponse,
      GetConnectionError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts/{connectedAccountId}",
    });
  }

  /**
   * Delete connection
   * Delete a connection
   */
  public static deleteConnection<ThrowOnError extends boolean = false>(
    options: Options<DeleteConnectionData, ThrowOnError>
  ) {
    return (options?.client ?? client).delete<
      DeleteConnectionResponse,
      DeleteConnectionError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts/{connectedAccountId}",
    });
  }

  /**
   * Get Auth credentials
   * Get authentication crdentials for the connected account, i.e all the headers, query parameters, etc. that are required to make requests to the third-party service directly.
   */
  public static getConnectionInfo<ThrowOnError extends boolean = false>(
    options: Options<GetConnectionInfoData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetConnectionInfoResponse,
      GetConnectionInfoError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts/{connectedAccountId}/info",
    });
  }

  /**
   * Disable connection
   * Disable a connection
   */
  public static disableConnection<ThrowOnError extends boolean = false>(
    options: Options<DisableConnectionData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      DisableConnectionResponse,
      DisableConnectionError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts/{connectedAccountId}/disable",
    });
  }

  /**
   * Enable connection
   * Enable a connection
   */
  public static enableConnection<ThrowOnError extends boolean = false>(
    options: Options<EnableConnectionData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      EnableConnectionResponse,
      EnableConnectionError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/connectedAccounts/{connectedAccountId}/enable",
    });
  }
}

export class TriggersService {
  /**
   * List triggers
   * List triggers
   */
  public static listTriggers<ThrowOnError extends boolean = false>(
    options?: Options<ListTriggersData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListTriggersResponse,
      ListTriggersError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers",
    });
  }

  /**
   * List trigger enums
   * List trigger enums
   */
  public static listTriggerEnums<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      ListTriggerEnumsResponse,
      ListTriggerEnumsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/list/enums",
    });
  }

  /**
   * Update new webhook
   * Update isNewWebhook
   */
  public static updateNewWebhook<ThrowOnError extends boolean = false>(
    options?: Options<UpdateNewWebhookData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      UpdateNewWebhookResponse,
      UpdateNewWebhookError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/update_webhook_format",
    });
  }

  /**
   * Enable trigger
   * Enables a trigger for a connected account and specific trigger name.
   */
  public static enableTrigger<ThrowOnError extends boolean = false>(
    options: Options<EnableTriggerData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      EnableTriggerResponse,
      EnableTriggerError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/enable/{connectedAccountId}/{triggerName}",
    });
  }

  /**
   * Get active triggers
   * Lists active triggers based on query parameters.
   */
  public static getActiveTriggers<ThrowOnError extends boolean = false>(
    options?: Options<GetActiveTriggersData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetActiveTriggersResponse,
      GetActiveTriggersError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/active_triggers",
    });
  }

  /**
   * Switch trigger instance status
   * Switches the status of a trigger instance.
   */
  public static switchTriggerInstanceStatus<
    ThrowOnError extends boolean = false,
  >(options: Options<SwitchTriggerInstanceStatusData, ThrowOnError>) {
    return (options?.client ?? client).patch<
      SwitchTriggerInstanceStatusResponse,
      SwitchTriggerInstanceStatusError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/instance/{triggerId}/status",
    });
  }

  /**
   * Disable trigger
   * Disables a specified trigger instance.
   */
  public static disableTrigger<ThrowOnError extends boolean = false>(
    options: Options<DisableTriggerData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      DisableTriggerResponse,
      DisableTriggerError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/disable/{triggerInstanceId}",
    });
  }

  /**
   * Delete trigger
   * Deletes a specified trigger instance.
   */
  public static deleteTrigger<ThrowOnError extends boolean = false>(
    options: Options<DeleteTriggerData, ThrowOnError>
  ) {
    return (options?.client ?? client).delete<
      DeleteTriggerResponse,
      DeleteTriggerError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/instance/{triggerInstanceId}",
    });
  }

  /**
   * Set callback url
   * Sets a universal callback URL for the client.
   */
  public static setCallbackUrl<ThrowOnError extends boolean = false>(
    options?: Options<SetCallbackUrlData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      SetCallbackUrlResponse,
      SetCallbackUrlError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/set_callback_url",
    });
  }

  /**
   * Get webhook url
   * Retrieves the universal callback URL set for the client.
   */
  public static getWebhookUrl<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetWebhookUrlResponse,
      GetWebhookUrlError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/callback_url",
    });
  }

  /**
   * Get logs
   * Fetches logs based on connection and integration details.
   */
  public static getTriggerLogs<ThrowOnError extends boolean = false>(
    options?: Options<GetTriggerLogsData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetTriggerLogsResponse,
      GetTriggerLogsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/triggers/logs",
    });
  }

  /**
   * Get trigger info
   * Get Trigger Info
   */
  public static getTriggerInfoV2<ThrowOnError extends boolean = false>(
    options: Options<GetTriggerInfoV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetTriggerInfoV2Response,
      GetTriggerInfoV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/triggers/{triggerName}",
    });
  }
}

export class CliService {
  /**
   * Handle cli code exchange
   */
  public static generateCliSession<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GenerateCliSessionResponse,
      GenerateCliSessionError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/cli/generate-cli-session",
    });
  }

  /**
   * Get cli code
   */
  public static getCliCode<ThrowOnError extends boolean = false>(
    options: Options<GetCliCodeData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetCliCodeResponse,
      GetCliCodeError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/cli/get-cli-code",
    });
  }

  /**
   * Handle cli code verification
   */
  public static verifyCliCode<ThrowOnError extends boolean = false>(
    options: Options<VerifyCliCodeData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      VerifyCliCodeResponse,
      VerifyCliCodeError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/cli/verify-cli-code",
    });
  }
}

export class LogsService {
  /**
   * Get logs
   * List logs
   */
  public static getLogs<ThrowOnError extends boolean = false>(
    options?: Options<GetLogsData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetLogsResponse,
      GetLogsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/logs/",
    });
  }

  /**
   * Post logs
   * Add new logs
   */
  public static postLogs<ThrowOnError extends boolean = false>(
    options?: Options<PostLogsData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      PostLogsResponse,
      PostLogsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/logs/",
    });
  }
}

export class ProjectsService {
  /**
   * Create new project
   * Create a new project to the client's organization
   */
  public static createProject<ThrowOnError extends boolean = false>(
    options?: Options<CreateProjectData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      CreateProjectResponse,
      CreateProjectError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/org/projects/create",
    });
  }

  /**
   * List all projects
   */
  public static getProjects<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetProjectsResponse,
      GetProjectsError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/org/projects",
    });
  }

  /**
   * Regenerate project api key
   * Regenerate project API key. Ideally use when no API key is available as project can have multiple API keys
   */
  public static regenerateProjectApiKey<ThrowOnError extends boolean = false>(
    options: Options<RegenerateProjectApiKeyData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      RegenerateProjectApiKeyResponse,
      RegenerateProjectApiKeyError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/org/projects/{projectId}/api-key/regenerate",
    });
  }

  /**
   * Get project
   */
  public static getProject<ThrowOnError extends boolean = false>(
    options: Options<GetProjectData, ThrowOnError>
  ) {
    return (options?.client ?? client).get<
      GetProjectResponse,
      GetProjectError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/org/projects/{projectId}",
    });
  }

  /**
   * Delete project
   */
  public static deleteProject<ThrowOnError extends boolean = false>(
    options: Options<DeleteProjectData, ThrowOnError>
  ) {
    return (options?.client ?? client).delete<
      DeleteProjectResponse,
      DeleteProjectError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/org/projects/{projectId}",
    });
  }

  /**
   * Rename project
   */
  public static renameProject<ThrowOnError extends boolean = false>(
    options: Options<RenameProjectData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      RenameProjectResponse,
      RenameProjectError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v1/org/projects/{projectId}/rename",
    });
  }
}

export class IntegrationsV2Service {
  /**
   * Search connector
   * Search for a connector
   */
  public static searchConnector<ThrowOnError extends boolean = false>(
    options?: Options<SearchConnectorData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      SearchConnectorResponse,
      SearchConnectorError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/integrations/search-by-filters",
    });
  }

  /**
   * Create connector
   * Create a new connector
   */
  public static createConnectorV2<ThrowOnError extends boolean = false>(
    options?: Options<CreateConnectorV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      CreateConnectorV2Response,
      CreateConnectorV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/integrations/create",
    });
  }

  /**
   * Get or create connector
   * Get or create a connector
   */
  public static getOrCreateConnector<ThrowOnError extends boolean = false>(
    options?: Options<GetOrCreateConnectorData, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      GetOrCreateConnectorResponse,
      GetOrCreateConnectorError,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/integrations/get-or-create",
    });
  }
}

export class Connectionsv2Service {
  /**
   * Initiate connection
   */
  public static initiateConnectionV2<ThrowOnError extends boolean = false>(
    options?: Options<InitiateConnectionV2Data, ThrowOnError>
  ) {
    return (options?.client ?? client).post<
      InitiateConnectionV2Response,
      InitiateConnectionV2Error,
      ThrowOnError
    >({
      ...options,
      url: "/api/v2/connectedAccounts/initiateConnection",
    });
  }
}
